package bot

import (
	"TelegramBot/internal/models"
	"TelegramBot/internal/service"
	"TelegramBot/pkg/kinopoisk"
	"fmt"
	"log"
	"strconv"
	"strings"

	tgBotApi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type tgBot struct {
	bot         *tgBotApi.BotAPI
	filmService service.Films
	api         *kinopoisk.KinopoiskAPI
}

var msgStart = `‚ú® –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ‚ú®  

üé¨ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º  
/add film_id ‚Äì –¥–æ–±–∞–≤—å —Ñ–∏–ª—å–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ  

üóë –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º  
/del film_id ‚Äì —É–¥–∞–ª–∏ —Ñ–∏–ª—å–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ  

üìã –ú–æ–∏ —Ñ–∏–ª—å–º—ã  
/my ‚Äì –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ  

üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª  
/post film_id ‚Äì –æ—Ç–ø—Ä–∞–≤—å —Ñ–∏–ª—å–º –≤ –∫–∞–Ω–∞–ª  

üôè NAMASTE  
*–ú–µ–Ω—å—à–µ —á–µ–º —Ç—Ä–∏...* üí´`

func New(bot *tgBotApi.BotAPI, films service.Films, api *kinopoisk.KinopoiskAPI) *tgBot {
	return &tgBot{bot: bot, filmService: films, api: api}
}

func (t *tgBot) BotInit() {
	update := tgBotApi.NewUpdate(1)
	updates := t.bot.GetUpdatesChan(update)
	for u := range updates {
		msg := tgBotApi.NewMessage(u.Message.Chat.ID, "")
		msg.ParseMode = "html"
		if u.Message != nil {
			spltMsg := strings.Split(u.Message.Text, " ")
			if len(spltMsg) > 1 {
				switch spltMsg[0] {
				case "/add":
					filmId, err := strconv.Atoi(spltMsg[1])
					if err != nil {
						msg.Text = "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–Ω–æ–µ ID !"
						t.bot.Send(msg)
						continue
					}
					item, err := t.api.GetFullInfoByID(filmId)
					if err != nil {
						msg.Text = "–ü–æ –¥–∞–Ω–Ω–æ–º—É ID —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n –ü—Ä–µ—à–ª–∏—Ç–µ ID —Å –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ !"
						t.bot.Send(msg)
						continue
					}
					if err := t.filmService.SaveFilmToUserPool(models.FilmsPool{
						UserID:        u.Message.From.ID,
						KinopoiskID:   item.KinopoiskID,
						KinopoiskHDID: item.KinopoiskHDID,
						Title:         item.TitleRu,
						Year:          item.Year,
						Description:   item.Description,
						PosterUrl:     item.PosterUrl,
					}); err != nil {
						msg.Text = "Bad Request: :( –§–∏–ª—å–º –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ :( "
						log.Println(err)
						t.bot.Send(msg)
						continue
					}
					msg.Text = fmt.Sprintf("–§–∏–ª—å–º: %s %d\n –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", item.TitleRu, item.Year)
					t.bot.Send(msg)
				case "/del":
					filmId, err := strconv.Atoi(spltMsg[1])
					if err != nil {
						msg.Text = "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–Ω–æ–µ ID !"
						t.bot.Send(msg)
						continue
					}
					if err := t.filmService.DeleteFilmUserPool(filmId, u.Message.From.ID); err != nil {
						msg.Text = "Bad Request: %( –ù–µ –≤–µ—Ä–Ω—ã–π ID –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %("
						log.Println(err)
						t.bot.Send(msg)
						continue
					}
					msg.Text = "–û–∫: –§–∏–ª—å–º —É–¥–∞–ª—ë–Ω !"
					t.bot.Send(msg)
				case "/post":
					filmId, err := strconv.Atoi(spltMsg[1])
					if err != nil {
						msg.Text = "–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–Ω–æ–µ ID !"
						t.bot.Send(msg)
						continue
					}
					caption, file, err := t.filmService.UserPost(filmId)
					if err != nil {
						msg.Text = "Bad Request"
						t.bot.Send(msg)
						continue
					}
					newPhoto := tgBotApi.NewPhotoToChannel("@cahnel_name", tgBotApi.FileBytes{
						Name:  "name",
						Bytes: file,
					})
					newPhoto.Caption = caption
					newPhoto.ParseMode = "html"
					t.bot.Send(newPhoto)
				}
			}
			switch u.Message.Text {
			case "/start":
				t.filmService.SaveUser(models.User{
					UserID:   u.Message.From.ID,
					ChatID:   u.Message.Chat.ID,
					UserName: u.Message.From.UserName,
				})
				msg.Text = msgStart
				t.bot.Send(msg)
			case "/my":
				text, err := t.filmService.GetUserPool(
					u.Message.From.ID,
					"false",
				)
				if err != nil {
					log.Println("bot.BotInit.mylist: ", err)
					msg.Text = "–¢–µ—Ö –Ω–µ–ø–æ–ª–∞–¥–∫–∏ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç—É —Ñ–∏–ª—å–º–æ–≤ –≤ –ø—É–ª–µ :("
					t.bot.Send(msg)
					continue
				}
				msg.Text = text

				t.bot.Send(msg)
			}
		}
	}
}
